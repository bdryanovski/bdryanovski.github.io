{"componentChunkName":"component---src-templates-blog-post-js","path":"/snippets/javascript-type/","result":{"data":{"site":{"siteMetadata":{"title":"Developer Notes","author":"Bozhidar Dryanovski"}},"mdx":{"id":"68eecdc0-dade-5a38-a3a8-f85573a2d208","excerpt":"Often I need to find what is the type of given variable so I could\ndecide how to handle it or what methods I may expect. At the same time using\n typeof  is notâ€¦","frontmatter":{"title":"JavaScript: find the types of a variables","date":"January 12, 2021"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript: find the types of a variables\",\n  \"date\": \"2021-01-12T00:00:00.000Z\",\n  \"slug\": \"/snippets/javascript/find-the-type-of-variable\",\n  \"tags\": [\"snippet\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Often I need to find what is the type of given variable so I could\\ndecide how to handle it or what methods I may expect. At the same time using\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \" is not always the solution we need. For example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof []\"), \" will return\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"object\"), \" that is because arrays are extended objects but it\\u2019s not what we want to get.\"), mdx(\"p\", null, \"There is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Array.isArray([])\"), \" that will return boolean but again we need to check for\\nmultiple types.\"), mdx(\"p\", null, \"Function below gonna returning string value of the passed variable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function type(value) {\\n  return Object.prototype.toString\\n    .call(value)\\n    .replace(/\\\\[object |\\\\]/gi,'')\\n    .toLowerCase();\\n}\\n\")), mdx(\"p\", null, \"I\\u2019m going with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".toLowerCase()\"), \" just to not relay on capital latters when comparing types.\\nAfter all we are working with exact string matching later on.\"), mdx(\"p\", null, \"Let\\u2019s write a test about it to be sure that everything is as expected:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"describe('type', () => {\\n  it('should return the correct type', () => {\\n    [\\n      ['map', new Map()],\\n      ['set', new Set()],\\n      ['weakmap', new WeakMap()],\\n      ['object', {}],\\n      ['string', 'Hello'],\\n      ['array', []],\\n      ['boolean', true],\\n      ['number', 5],\\n      ['function', () => {}],\\n      ['date', new Date()],\\n      ['generatorfunction', function* generator() {}],\\n    ].forEach(([expectedType, value]) => {\\n      expect(type(value)).toBe(expectedType)\\n    })\\n  })\\n})\\n\")), mdx(\"p\", null, \"The test is not very extensiv or cover all posible cases but still - show that in most common cases\\nit\\u2019s working.\"), mdx(\"p\", null, \"In the cases where we need to accept for example two or more types, now there is a simple way of checking them\\nwithout writing multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function oneOfType(value, types) {\\n  return (types || []).includes(type(value))\\n}\\n\\nconst foo = 'must-be-string'\\n\\nif (oneOfType(foo, ['string', 'array'])) {\\n  console.log(foo.length)\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/snippets/javascript-type/","previous":null,"next":{"id":"2624904f-090f-5f98-8d7f-3fb3deb588d1","fields":{"slug":"/snippets/javascript-empty/"},"frontmatter":{"title":"JavaScript: is something empty?"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript: is something empty?\",\n  \"date\": \"2021-01-13T00:00:00.000Z\",\n  \"slug\": \"/snippets/javascript/is-something-empty\",\n  \"tags\": [\"snippet\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Often the question is is something empty ? And what is empty really? The quick answer is\\nempty is what we decide to be empty. The function below, the standart Array and Object are just\\ntested to see if they have entries or keys. But for example boolean and numbers they are not empty\\nthey always have some value, so we decide what value is empty and what not.\"), mdx(\"p\", null, \"So said like that, everything bigger than 0 is not empty, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" are empty.\"), mdx(\"p\", null, \"The method below don\\u2019t handle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Set\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WeakMap\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function empty(value) {\\n  return (\\n    (value === undefined || value === null)\\n    || (typeof value === 'number' && value <= 0)\\n    || (Array.isArray(value) && value.length === 0)\\n    || (typeof value === 'object' && Object.keys(value).length === 0)\\n  )\\n}\\n\")), mdx(\"p\", null, \"In addation to that we need to add some test to make sure everything will\\ncontinue to work:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"describe('empty', () => {\\n  it('should check value and find is it empty or not', () => {\\n    [\\n      [true, []],\\n      [false, [2]],\\n      [true, {}],\\n      [false, { foo: 1 }],\\n      [true, null],\\n      [true, undefined],\\n      [false, true],\\n      [false, false],\\n      [false, 1],\\n      [false, 5],\\n      [true, 0]\\n    ].forEach(([expectedType, value]) => {\\n      expect(empty(value)).toBe(expectedType)\\n    })\\n  })\\n})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":["2677188060","3128451518"]}